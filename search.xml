<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>剑指 Offer 04. 二维数组中的查找</title>
      <link href="/2022/01/12/%E5%89%91%E6%8C%87-Offer-04-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/01/12/%E5%89%91%E6%8C%87-Offer-04-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 03. 数组中重复的数字</title>
      <link href="/2022/01/11/%E5%89%91%E6%8C%87%20Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2022/01/11/%E5%89%91%E6%8C%87%20Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/" target="_blank" rel="noopener">题目链接</a></p><h2 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h2><p>这种题目当然要用set啦</p><pre class=" language-cpp"><code class="language-cpp">set <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span>nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h2><p>set能做到的东西map肯定也行啊</p><pre class=" language-cpp"><code class="language-cpp">map  <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> mp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h2><p>由于n很小，所以可以开一个大小为100005的数组，用下标维护</p><pre class=" language-cpp"><code class="language-cpp">       <span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记得初始化</span>        <span class="token keyword">int</span> l<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> vis<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="思路4"><a href="#思路4" class="headerlink" title="思路4"></a>思路4</h2><p>这个方法不需要额外空间</p><p>排序数组，前一个跟后一个一样就重复了啦</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> l<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="思路5"><a href="#思路5" class="headerlink" title="思路5"></a>思路5</h2><p>很神奇的原地交换</p><p>我的理解是对排序的特殊考虑</p><p>首先如果没有重复的那么最后肯定是nums[0]=0,nums[1]=1…,num[n-1]=n-1</p><p>所以我们遍历数组，把每个数送回它应该有的位子</p><p>送回的过程中有两种情况</p><p>1.nums[i]!=i,此时我们让i回家</p><p>2.nums[i]==i,说明出现了重复数字</p><pre class=" language-cpp"><code class="language-cpp"> <span class="token keyword">int</span> l<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2022/01/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/01/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>写在前面的废话</strong></p><p>搭建这个博客主要是放寒假了闲的慌，看见很多同学都有了自己的博客(看起来很炫酷的样子)，所以就花了几天时间搭建了这个</p><p>本文仅供学习交流，如有错误敬请指正</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=5" target="_blank" rel="noopener">建议先看这个搭建个框架</a></p><p><a href="https://www.bilibili.com/video/BV1je41147Ma?p=1" target="_blank" rel="noopener">p7p8 讲解了博客主题优化</a></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><a href="https://blog.csdn.net/qq_43285335/article/details/90696126" target="_blank" rel="noopener">nodejs下载安装及配置环境 </a>  第5步时选择 Add to PATH</p><p><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html" target="_blank" rel="noopener">Windows系统Git安装教程</a></p><p>在cmd窗口下依次运行</p><pre><code>node -vnpm -vgit --version</code></pre><p>看到版本号就算成功</p><p>运行代码</p><pre><code>npm install hexo-cli -g</code></pre><p>然后运行</p><pre><code>hexo -v</code></pre><p>看到版本号就算成功</p><h1 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h1><h2 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h2><p>在<a href="https://github.com/" target="_blank" rel="noopener">github</a>上注册一个账号</p><p><a href="https://jingyan.baidu.com/article/4e5b3e192200e291911e2468.html" target="_blank" rel="noopener">注册github账号</a></p><h2 id="搭建仓库-1"><a href="#搭建仓库-1" class="headerlink" title="搭建仓库"></a>搭建仓库</h2><p>点击右上角头像-&gt;Your repositories-&gt;new</p><p>Repository name<strong>一定要</strong>填写   xxx(你的注册名).github.io</p><p>同时勾选public和Add a README file</p><p>完成</p><h1 id="生成sshkey"><a href="#生成sshkey" class="headerlink" title="生成sshkey"></a>生成sshkey</h1><p>新建文件夹(以后的文件装这里了)</p><p>在文件夹右键并选择Git Bash Here</p><p>输入(<strong>注意在这个框里面不能cv，右键选择paste或者shift+ins</strong>)</p><pre><code>ssh-keygen -t rsa -C &quot;你注册github的邮箱&quot;</code></pre><p>然后一直回车，如果碰到要你选yes或no就选yes</p><p>打开文件管理器，c盘里打开用户/users，点击你的用户名，就可以看到一个.ssh的文件夹</p><p>打开id_rsa.pub文件，复制里面的内容</p><p>打开github，点击头像-&gt;Settings,在左侧栏找到SSH and GPG keys</p><p>点击New SSH key，复制内容，再起个名字</p><h2 id="测试ssh是否绑定成功"><a href="#测试ssh是否绑定成功" class="headerlink" title="测试ssh是否绑定成功"></a>测试ssh是否绑定成功</h2><p>在gitbrash窗口里输入</p><pre><code>ssh -T git@github.com</code></pre><p>出现</p><pre><code>Hi 用户名! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>即可</p><p>如果叫你选yes或no就选yes</p><h1 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h1><h2 id="本地生成"><a href="#本地生成" class="headerlink" title="本地生成"></a>本地生成</h2><p>在gitbrash窗口敲入</p><pre><code>hexo init</code></pre><p>连接超时就多试几次</p><p>出现</p><pre><code>start blogging with hexo</code></pre><p>就ok</p><p>运行</p><pre><code>hexo s</code></pre><p>出现</p><pre><code>Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</code></pre><p>此时在浏览器浏览<a href="http://localhost:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%AC%E5%9C%B0%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%95%A6" target="_blank" rel="noopener">http://localhost:4000/，就可以看到本地静态博客啦</a></p><p>按ctrl+c关闭</p><h2 id="发布到互联网"><a href="#发布到互联网" class="headerlink" title="发布到互联网"></a>发布到互联网</h2><p>现在回到你新建的文件夹，你就可以在新建的文件夹里看到很多东西了</p><p>打开_config.yml(建议把打开方式换成vsc)</p><p>拉倒最下面</p><p>把deploy下的内容换成</p><pre><code>  type: git  repo: XXX  branch: main</code></pre><h3 id="XXX里的内容"><a href="#XXX里的内容" class="headerlink" title="XXX里的内容"></a>XXX里的内容</h3><p>在github里通过头像-&gt;Your repositories进入你的仓库，找到你刚才建的(xxx.github.io)点进去</p><p>点击那个绿油油的code，选择ssh，你就可以看见串字符<a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;&#120;&#x78;&#x78;&#x78;&#120;&#120;&#x78;">&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;&#120;&#x78;&#x78;&#x78;&#120;&#120;&#x78;</a>，复制粘贴到xxx里去</p><p>按下ctrl+s保存</p><p>返回gitbrash小黑框运行</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>同样，卡了就多运行几次</p><p>依次运行</p><pre><code>hexo ghexo d  //这条命令执行完成后就可以在仓库看到刚才的一堆文件了</code></pre><p>现在就可以通过https://用户名.github.io/来查看博客啦</p><p>好耶</p><h1 id="关于主题优化"><a href="#关于主题优化" class="headerlink" title="关于主题优化"></a>关于主题优化</h1><p><a href="https://blog.csdn.net/jspnetcn/article/details/104111651" target="_blank" rel="noopener">可以看这篇文章</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="我的本地文章在哪"><a href="#我的本地文章在哪" class="headerlink" title="我的本地文章在哪"></a>我的本地文章在哪</h2><p>新建文件夹里source -&gt; _posts,里面的.md文章</p><h2 id="怎么发布博客"><a href="#怎么发布博客" class="headerlink" title="怎么发布博客"></a>怎么发布博客</h2><p>新建文件</p><pre><code>hexo new &quot;文章名&quot;</code></pre><p>现在你可以在source -&gt; _posts里看见并编辑文章啦</p><p>编写完成后运行(这期间你可以用 hexo s 命令查看效果)</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>就可以啦</p>]]></content>
      
      
      <categories>
          
          <category> 关于博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
